#!/usr/bin/env python3
"""
Exemplo de uso dos pontos de varia√ß√£o da linha de produto de compiladores.

Este script demonstra como usar os diferentes pontos de varia√ß√£o:
- Ponto de Varia√ß√£o 1: Interface do Compilador (Terminal vs GUI)
- Ponto de Varia√ß√£o 2: Gera√ß√£o de C√≥digo (Mostrar vs Ocultar)
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(str(Path(__file__).parent.parent))

from cli.builder import ProductBuilder
from product_config.product_config import PREDEFINED_PRODUCTS


def demonstrate_variation_points():
    """Demonstra os pontos de varia√ß√£o implementados."""
    
    print("=" * 80)
    print("    DEMONSTRA√á√ÉO DOS PONTOS DE VARIA√á√ÉO - LINHA DE PRODUTO MINIPAR")
    print("=" * 80)
    print()
    
    # Arquivo de exemplo para compila√ß√£o
    example_file = "examples/example.mp"
    
    # Lista os produtos dispon√≠veis com pontos de varia√ß√£o
    variation_products = [
        "minipar_compiler_terminal",
        "minipar_compiler_gui", 
        "minipar_compiler_show_code",
        "minipar_compiler_hide_code"
    ]
    
    print("PRODUTOS COM PONTOS DE VARIA√á√ÉO DISPON√çVEIS:")
    print("-" * 50)
    
    for product_name in variation_products:
        if product_name in PREDEFINED_PRODUCTS:
            config = PREDEFINED_PRODUCTS[product_name]
            print(f"üì¶ {product_name}")
            print(f"   Descri√ß√£o: {config.description}")
            print(f"   Interface: {config.interface_type.value}")
            print(f"   Exibi√ß√£o de C√≥digo: {config.code_display_mode.value}")
            if config.backend:
                print(f"   Backend: {config.backend.backend_type.value}")
            print()
    
    print("=" * 80)
    print("EXEMPLO DE USO:")
    print("=" * 80)
    print()
    
    # Exemplo 1: Compilador com Interface Terminal
    print("üîπ EXEMPLO 1: Compilador com Interface Terminal")
    print("-" * 50)
    try:
        config = PREDEFINED_PRODUCTS["minipar_compiler_terminal"]
        builder = ProductBuilder(config)
        
        print("Configura√ß√£o:")
        print(f"  - Interface: {config.interface_type.value}")
        print(f"  - Exibi√ß√£o de C√≥digo: {config.code_display_mode.value}")
        print(f"  - Backend: {config.backend.backend_type.value}")
        print()
        
        # Simula compila√ß√£o (sem arquivo real)
        print("Simulando compila√ß√£o...")
        print("‚úÖ Produto configurado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    
    # Exemplo 2: Compilador com Interface GUI
    print("üîπ EXEMPLO 2: Compilador com Interface Gr√°fica")
    print("-" * 50)
    try:
        config = PREDEFINED_PRODUCTS["minipar_compiler_gui"]
        builder = ProductBuilder(config)
        
        print("Configura√ß√£o:")
        print(f"  - Interface: {config.interface_type.value}")
        print(f"  - Exibi√ß√£o de C√≥digo: {config.code_display_mode.value}")
        print(f"  - Backend: {config.backend.backend_type.value}")
        print()
        
        print("Simulando compila√ß√£o...")
        print("‚úÖ Produto configurado com sucesso!")
        print("‚ÑπÔ∏è  Nota: Interface GUI requer tkinter instalado")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    
    # Exemplo 3: Compilador que mostra c√≥digo
    print("üîπ EXEMPLO 3: Compilador que mostra c√≥digo de 3 endere√ßos e assembly ARMv7")
    print("-" * 50)
    try:
        config = PREDEFINED_PRODUCTS["minipar_compiler_show_code"]
        builder = ProductBuilder(config)
        
        print("Configura√ß√£o:")
        print(f"  - Interface: {config.interface_type.value}")
        print(f"  - Exibi√ß√£o de C√≥digo: {config.code_display_mode.value}")
        print(f"  - Backend: {config.backend.backend_type.value}")
        print(f"  - Arquitetura: {config.backend.target_arch}")
        print()
        
        print("Simulando compila√ß√£o...")
        print("‚úÖ Produto configurado com sucesso!")
        print("‚ÑπÔ∏è  Este produto mostrar√°:")
        print("   - C√≥digo intermedi√°rio (3 endere√ßos)")
        print("   - C√≥digo assembly ARMv7 para CPUlator")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    
    # Exemplo 4: Compilador que oculta c√≥digo
    print("üîπ EXEMPLO 4: Compilador que n√£o mostra c√≥digo gerado")
    print("-" * 50)
    try:
        config = PREDEFINED_PRODUCTS["minipar_compiler_hide_code"]
        builder = ProductBuilder(config)
        
        print("Configura√ß√£o:")
        print(f"  - Interface: {config.interface_type.value}")
        print(f"  - Exibi√ß√£o de C√≥digo: {config.code_display_mode.value}")
        print(f"  - Backend: {config.backend.backend_type.value}")
        print()
        
        print("Simulando compila√ß√£o...")
        print("‚úÖ Produto configurado com sucesso!")
        print("‚ÑπÔ∏è  Este produto ocultar√°:")
        print("   - C√≥digo intermedi√°rio")
        print("   - C√≥digo assembly")
        print("   - Apenas salvar√° o arquivo de sa√≠da")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    
    print()
    print("=" * 80)
    print("COMO USAR:")
    print("=" * 80)
    print()
    print("Para usar os pontos de varia√ß√£o, execute:")
    print()
    print("  # Interface Terminal")
    print("  python main.py build --product minipar_compiler_terminal input.mp")
    print()
    print("  # Interface Gr√°fica")
    print("  python main.py build --product minipar_compiler_gui input.mp")
    print()
    print("  # Mostrar c√≥digo de 3 endere√ßos e assembly ARMv7")
    print("  python main.py build --product minipar_compiler_show_code input.mp")
    print()
    print("  # N√£o mostrar c√≥digo gerado")
    print("  python main.py build --product minipar_compiler_hide_code input.mp")
    print()
    print("=" * 80)


if __name__ == '__main__':
    demonstrate_variation_points()
